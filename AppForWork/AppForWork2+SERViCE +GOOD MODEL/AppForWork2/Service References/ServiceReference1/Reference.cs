//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppForWork2.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IOperation")]
    public interface IOperation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Add", ReplyAction="http://tempuri.org/IOperation/AddResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Truck))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Car))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Bus))]
        void Add(Cars.Vehicles.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Add", ReplyAction="http://tempuri.org/IOperation/AddResponse")]
        System.Threading.Tasks.Task AddAsync(Cars.Vehicles.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Clear", ReplyAction="http://tempuri.org/IOperation/ClearResponse")]
        void Clear();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Clear", ReplyAction="http://tempuri.org/IOperation/ClearResponse")]
        System.Threading.Tasks.Task ClearAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Remove", ReplyAction="http://tempuri.org/IOperation/RemoveResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Truck))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Car))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Bus))]
        void Remove(Cars.Vehicles.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Remove", ReplyAction="http://tempuri.org/IOperation/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(Cars.Vehicles.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Refresh", ReplyAction="http://tempuri.org/IOperation/RefreshResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Truck))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Car))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Bus))]
        void Refresh(Cars.Vehicles.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Refresh", ReplyAction="http://tempuri.org/IOperation/RefreshResponse")]
        System.Threading.Tasks.Task RefreshAsync(Cars.Vehicles.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Replace", ReplyAction="http://tempuri.org/IOperation/ReplaceResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Truck))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Car))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Cars.Vehicles.Bus))]
        void Replace(string name, Cars.Vehicles.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Replace", ReplyAction="http://tempuri.org/IOperation/ReplaceResponse")]
        System.Threading.Tasks.Task ReplaceAsync(string name, Cars.Vehicles.Vehicle vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/AddMany", ReplyAction="http://tempuri.org/IOperation/AddManyResponse")]
        void AddMany(Cars.Vehicles.Vehicle[] vehicles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/AddMany", ReplyAction="http://tempuri.org/IOperation/AddManyResponse")]
        System.Threading.Tasks.Task AddManyAsync(Cars.Vehicles.Vehicle[] vehicles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Read", ReplyAction="http://tempuri.org/IOperation/ReadResponse")]
        Cars.Vehicles.Vehicle[] Read();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation/Read", ReplyAction="http://tempuri.org/IOperation/ReadResponse")]
        System.Threading.Tasks.Task<Cars.Vehicles.Vehicle[]> ReadAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOperationChannel : AppForWork2.ServiceReference1.IOperation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OperationClient : System.ServiceModel.ClientBase<AppForWork2.ServiceReference1.IOperation>, AppForWork2.ServiceReference1.IOperation {
        
        public OperationClient() {
        }
        
        public OperationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OperationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Add(Cars.Vehicles.Vehicle vehicle) {
            base.Channel.Add(vehicle);
        }
        
        public System.Threading.Tasks.Task AddAsync(Cars.Vehicles.Vehicle vehicle) {
            return base.Channel.AddAsync(vehicle);
        }
        
        public void Clear() {
            base.Channel.Clear();
        }
        
        public System.Threading.Tasks.Task ClearAsync() {
            return base.Channel.ClearAsync();
        }
        
        public void Remove(Cars.Vehicles.Vehicle vehicle) {
            base.Channel.Remove(vehicle);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(Cars.Vehicles.Vehicle vehicle) {
            return base.Channel.RemoveAsync(vehicle);
        }
        
        public void Refresh(Cars.Vehicles.Vehicle vehicle) {
            base.Channel.Refresh(vehicle);
        }
        
        public System.Threading.Tasks.Task RefreshAsync(Cars.Vehicles.Vehicle vehicle) {
            return base.Channel.RefreshAsync(vehicle);
        }
        
        public void Replace(string name, Cars.Vehicles.Vehicle vehicle) {
            base.Channel.Replace(name, vehicle);
        }
        
        public System.Threading.Tasks.Task ReplaceAsync(string name, Cars.Vehicles.Vehicle vehicle) {
            return base.Channel.ReplaceAsync(name, vehicle);
        }
        
        public void AddMany(Cars.Vehicles.Vehicle[] vehicles) {
            base.Channel.AddMany(vehicles);
        }
        
        public System.Threading.Tasks.Task AddManyAsync(Cars.Vehicles.Vehicle[] vehicles) {
            return base.Channel.AddManyAsync(vehicles);
        }
        
        public Cars.Vehicles.Vehicle[] Read() {
            return base.Channel.Read();
        }
        
        public System.Threading.Tasks.Task<Cars.Vehicles.Vehicle[]> ReadAsync() {
            return base.Channel.ReadAsync();
        }
    }
}
